{"version":3,"file":"226.beb51483.js","mappings":"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","sources":["webpack://stories/./node_modules/mermaid/dist/stateDiagram-587899a1.js"],"sourcesContent":["import { d as db, p as parser, s as styles } from \"./styles-6aaf32cf.js\";\nimport { line, curveBasis, select } from \"d3\";\nimport { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as getConfig, u as utils, e as common, l as log, i as configureSvgSize } from \"./mermaid-b5860b54.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nconst idCache = {};\nconst set = (key, val) => {\n  idCache[key] = val;\n};\nconst get = (k) => idCache[k];\nconst keys = () => Object.keys(idCache);\nconst size = () => keys().length;\nconst idCache$1 = {\n  get,\n  set,\n  keys,\n  size\n};\nconst drawStartState = (g) => g.append(\"circle\").attr(\"class\", \"start-state\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit);\nconst drawDivider = (g) => g.append(\"line\").style(\"stroke\", \"grey\").style(\"stroke-dasharray\", \"3\").attr(\"x1\", getConfig().state.textHeight).attr(\"class\", \"divider\").attr(\"x2\", getConfig().state.textHeight * 2).attr(\"y1\", 0).attr(\"y2\", 0);\nconst drawSimpleState = (g, stateDef) => {\n  const state = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 2 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const classBox = state.node().getBBox();\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", classBox.width + 2 * getConfig().state.padding).attr(\"height\", classBox.height + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return state;\n};\nconst drawDescrState = (g, stateDef) => {\n  const addTspan = function(textEl, txt, isFirst2) {\n    const tSpan = textEl.append(\"tspan\").attr(\"x\", 2 * getConfig().state.padding).text(txt);\n    if (!isFirst2) {\n      tSpan.attr(\"dy\", getConfig().state.textHeight);\n    }\n  };\n  const title = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 1.3 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.descriptions[0]);\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n  const description = g.append(\"text\").attr(\"x\", getConfig().state.padding).attr(\n    \"y\",\n    titleHeight + getConfig().state.padding * 0.4 + getConfig().state.dividerMargin + getConfig().state.textHeight\n  ).attr(\"class\", \"state-description\");\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function(descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n  const descrLine = g.append(\"line\").attr(\"x1\", getConfig().state.padding).attr(\"y1\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"y2\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"class\", \"descr-divider\");\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n  descrLine.attr(\"x2\", width + 3 * getConfig().state.padding);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", width + 2 * getConfig().state.padding).attr(\"height\", descrBox.height + titleHeight + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n  const title = g.append(\"text\").attr(\"x\", 0).attr(\"y\", getConfig().state.titleShift).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth);\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  const graphBox = g.node().getBBox();\n  if (stateDef.doc)\n    ;\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n  const lineY = 1 - getConfig().state.textHeight;\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", lineY).attr(\"class\", altBkg ? \"alt-composit\" : \"composit\").attr(\"width\", width).attr(\n    \"height\",\n    graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n  ).attr(\"rx\", \"0\");\n  title.attr(\"x\", startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr(\"x\", orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", getConfig().state.textHeight * 3).attr(\"rx\", getConfig().state.radius);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", graphBox.height + 3 + 2 * getConfig().state.textHeight).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst drawEndState = (g) => {\n  g.append(\"circle\").attr(\"class\", \"end-state-outer\").attr(\"r\", getConfig().state.sizeUnit + getConfig().state.miniPadding).attr(\n    \"cx\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  ).attr(\n    \"cy\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  );\n  return g.append(\"circle\").attr(\"class\", \"end-state-inner\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit + 2).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit + 2);\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g.append(\"rect\").style(\"stroke\", \"black\").style(\"fill\", \"black\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding);\n};\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n  const textElem = g.append(\"text\");\n  textElem.style(\"text-anchor\", \"start\");\n  textElem.attr(\"class\", \"noteText\");\n  let text = _text.replace(/\\r\\n/g, \"<br/>\");\n  text = text.replace(/\\n/g, \"<br/>\");\n  const lines = text.split(common.lineBreakRegex);\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line2 of lines) {\n    const txt = line2.trim();\n    if (txt.length > 0) {\n      const span = textElem.append(\"tspan\");\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr(\"x\", x + getConfig().state.noteMargin);\n      span.attr(\"y\", y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n};\nconst drawNote = (text, g) => {\n  g.attr(\"class\", \"state-note\");\n  const note = g.append(\"rect\").attr(\"x\", 0).attr(\"y\", getConfig().state.padding);\n  const rectElem = g.append(\"g\");\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr(\"height\", textHeight + 2 * getConfig().state.noteMargin);\n  note.attr(\"width\", textWidth + getConfig().state.noteMargin * 2);\n  return note;\n};\nconst drawState = function(elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id,\n    label: stateDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"stateGroup\");\n  if (stateDef.type === \"start\") {\n    drawStartState(g);\n  }\n  if (stateDef.type === \"end\") {\n    drawEndState(g);\n  }\n  if (stateDef.type === \"fork\" || stateDef.type === \"join\") {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === \"note\") {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === \"divider\") {\n    drawDivider(g);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n  idCache$1.set(id, stateInfo);\n  return stateInfo;\n};\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case db.relationType.EXTENSION:\n        return \"extension\";\n      case db.relationType.COMPOSITION:\n        return \"composition\";\n      case db.relationType.DEPENDENCY:\n        return \"dependency\";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"transition\");\n  let url = \"\";\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  svgPath.attr(\n    \"marker-end\",\n    \"url(\" + url + \"#\" + getRelationType(db.relationType.DEPENDENCY) + \"End)\"\n  );\n  if (relation.title !== void 0) {\n    const label = elem.append(\"g\").attr(\"class\", \"stateLabel\");\n    const { x, y } = utils.calcLabelPosition(path.points);\n    const rows = common.getRows(relation.title);\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label.append(\"text\").attr(\"text-anchor\", \"middle\").text(rows[i]).attr(\"x\", x).attr(\"y\", y + titleHeight);\n      const boundsTmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundsTmp.width);\n      minX = Math.min(minX, boundsTmp.x);\n      log.info(boundsTmp.x, x, y + titleHeight);\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info(\"Title height\", titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n      titleRows.forEach((title, i) => title.attr(\"y\", y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n    const bounds = label.node().getBBox();\n    label.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", x - maxWidth / 2 - getConfig().state.padding / 2).attr(\"y\", y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5).attr(\"width\", maxWidth + getConfig().state.padding).attr(\"height\", boxHeight + getConfig().state.padding);\n    log.info(bounds);\n  }\n  edgeCount++;\n};\nlet conf;\nconst transformationLog = {};\nconst setConf = function() {\n};\nconst insertMarkers = function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 19,7 L9,13 L14,7 L9,1 Z\");\n};\nconst draw = function(text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  log.debug(\"Rendering diagram \" + text);\n  const diagram2 = root.select(`[id='${id}']`);\n  insertMarkers(diagram2);\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram2, void 0, false, root, doc, diagObj);\n  const padding = conf.padding;\n  const bounds = diagram2.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram2, height, svgWidth, conf.useMaxWidth);\n  diagram2.attr(\n    \"viewBox\",\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + \" \" + height\n  );\n};\nconst getLabelWidth = (text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\nconst renderDoc = (doc, diagram2, parentId, altBkg, root, domDocument, diagObj) => {\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true\n  });\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === \"relation\") {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n  if (parentId) {\n    graph.setGraph({\n      rankdir: \"LR\",\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: \"tight-tree\",\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: \"TB\",\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: \"tight-tree\",\n      // ranker: 'network-simplex'\n      isMultiGraph: true\n    });\n  }\n  graph.setDefaultEdgeLabel(function() {\n    return {};\n  });\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n  const keys2 = Object.keys(states);\n  for (const key of keys2) {\n    const stateDef = states[key];\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram2.append(\"g\").attr(\"id\", stateDef.id).attr(\"class\", \"stateGroup\");\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n      {\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      }\n    } else {\n      node = drawState(diagram2, stateDef);\n    }\n    if (stateDef.note) {\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + \"-note\",\n        note: stateDef.note,\n        type: \"note\"\n      };\n      const note = drawState(diagram2, noteDef);\n      if (stateDef.note.position === \"left of\") {\n        graph.setNode(node.id + \"-note\", note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + \"-note\", note);\n      }\n      graph.setParent(node.id, node.id + \"-group\");\n      graph.setParent(node.id + \"-note\", node.id + \"-group\");\n    } else {\n      graph.setNode(node.id, node);\n    }\n  }\n  log.debug(\"Count=\", graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function(relation) {\n    cnt++;\n    log.debug(\"Setting edge\", relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common.getRows(relation.title).length,\n        labelpos: \"c\"\n      },\n      \"id\" + cnt\n    );\n  });\n  layout(graph);\n  log.debug(\"Graph after layout\", graph.nodes());\n  const svgElem = diagram2.node();\n  graph.nodes().forEach(function(v) {\n    if (v !== void 0 && graph.node(v) !== void 0) {\n      log.warn(\"Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\n        \"transform\",\n        \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + \" )\"\n      );\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"data-x-shift\", graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll(\"#\" + svgElem.id + \" #\" + v + \" .divider\");\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute(\"data-x-shift\"), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute(\"x1\", 0 - pShift + 8);\n        divider.setAttribute(\"x2\", pWidth - pShift - 8);\n      });\n    } else {\n      log.debug(\"No Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n    }\n  });\n  let stateBox = svgElem.getBBox();\n  graph.edges().forEach(function(e) {\n    if (e !== void 0 && graph.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram2, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n  stateBox = svgElem.getBBox();\n  const stateInfo = {\n    id: parentId ? parentId : \"root\",\n    label: parentId ? parentId : \"root\",\n    width: 0,\n    height: 0\n  };\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n  log.debug(\"Doc rendered\", stateInfo, graph);\n  return stateInfo;\n};\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["idCache","set","key","val","get","k","keys","Object","size","length","idCache$1","drawStartState","g","append","attr","getConfig","state","sizeUnit","padding","drawDivider","style","textHeight","drawSimpleState","stateDef","fontSize","text","id","classBox","node","getBBox","insert","width","height","radius","drawDescrState","addTspan","textEl","txt","isFirst2","tSpan","title","descriptions","titleBox","titleHeight","description","dividerMargin","isFirst","isSecond","forEach","descr","descrLine","descrBox","Math","max","addTitleAndBox","altBkg","pad","dblPad","orgBox","orgWidth","orgX","x","titleShift","titleWidth","startX","graphBox","doc","abs","lineY","drawEndState","miniPadding","drawForkJoinState","forkWidth","forkHeight","parentId","tmp","_drawLongText","_text","y","textElem","replace","lines","split","common","lineBreakRegex","tHeight","noteMargin","line2","trim","span","textBounds","textWidth","drawNote","note","rectElem","drawState","elem","stateInfo","label","type","stateBox","edgeCount","drawEdge","path","relation","getRelationType","db","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","points","filter","p","Number","isNaN","lineData","lineFunction","line","d","curve","curveBasis","svgPath","url","arrowMarkerAbsolute","window","location","protocol","host","pathname","search","utils","calcLabelPosition","rows","getRows","titleRows","maxWidth","minX","i","boundsTmp","min","log","info","push","boxHeight","heightAdj","bounds","conf","transformationLog","setConf","insertMarkers","draw","_version","diagObj","securityLevel","sandboxElement","select","root","nodes","contentDocument","body","document","debug","diagram2","rootDoc","getRootDoc","renderDoc","svgWidth","configureSvgSize","useMaxWidth","getLabelWidth","fontSizeFactor","domDocument","graph","graphlib","compound","multigraph","edgeFreeDoc","stmt","setGraph","rankdir","ranker","ranksep","edgeLengthFactor","nodeSep","isMultiGraph","setDefaultEdgeLabel","extract","states","getStates","relations","getRelations","keys2","sub","boxBounds","compositTitleSize","noteDef","position","setNode","setParent","nodeCount","cnt","setEdge","id1","id2","labelHeight","labelpos","layout","svgElem","v","warn","JSON","stringify","dividers","querySelectorAll","divider","parent","parentElement","pWidth","pShift","parseInt","getAttribute","setAttribute","edges","e","edge","w","renderer","diagram","parser","styles","init","cnf","clear"],"sourceRoot":""}