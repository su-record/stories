{"version":3,"file":"879.5f960d2e.js","mappings":"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","sources":["webpack://stories/./node_modules/mdast-util-to-string/lib/index.js","webpack://stories/./node_modules/micromark-util-chunked/index.js","webpack://stories/./node_modules/micromark-util-combine-extensions/index.js","webpack://stories/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://stories/./node_modules/micromark-util-character/index.js","webpack://stories/./node_modules/micromark-factory-space/index.js","webpack://stories/./node_modules/micromark/lib/initialize/content.js","webpack://stories/./node_modules/micromark/lib/initialize/document.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://stories/./node_modules/micromark-util-subtokenize/index.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/content.js","webpack://stories/./node_modules/micromark/lib/initialize/flow.js","webpack://stories/./node_modules/micromark/lib/initialize/text.js","webpack://stories/./node_modules/micromark-util-resolve-all/index.js","webpack://stories/./node_modules/micromark/lib/create-tokenizer.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/list.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://stories/./node_modules/micromark-factory-destination/index.js","webpack://stories/./node_modules/micromark-factory-label/index.js","webpack://stories/./node_modules/micromark-factory-title/index.js","webpack://stories/./node_modules/micromark-factory-whitespace/index.js","webpack://stories/./node_modules/micromark-util-normalize-identifier/index.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://stories/./node_modules/micromark-util-html-tag-name/index.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://stories/./node_modules/decode-named-character-reference/index.dom.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://stories/./node_modules/micromark-util-classify-character/index.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://stories/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://stories/./node_modules/micromark/lib/constructs.js","webpack://stories/./node_modules/micromark/lib/parse.js","webpack://stories/./node_modules/micromark/lib/preprocess.js","webpack://stories/./node_modules/micromark/lib/postprocess.js","webpack://stories/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://stories/./node_modules/micromark-util-decode-string/index.js","webpack://stories/./node_modules/unist-util-stringify-position/lib/index.js","webpack://stories/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://stories/./node_modules/mermaid/dist/createText-2e5e7dd3.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","import { l as log, M as decodeEntities } from \"./mermaid-b5860b54.js\";\nimport { fromMarkdown } from \"mdast-util-from-markdown\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.value.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n      node.children.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      return node.value.replace(/\\n/g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"emphasis\") {\n      return `<em>${node.children.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction splitTextToChars(text) {\n  if (Intl.Segmenter) {\n    return [...new Intl.Segmenter().segment(text)].map((s) => s.segment);\n  }\n  return [...text];\n}\nfunction splitWordToFitWidth(checkFit, word) {\n  const characters = splitTextToChars(word.content);\n  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n  if (remainingChars.length === 0) {\n    return [\n      { content: usedChars.join(\"\"), type },\n      { content: \"\", type }\n    ];\n  }\n  const [nextChar, ...rest] = remainingChars;\n  const newWord = [...usedChars, nextChar];\n  if (checkFit([{ content: newWord.join(\"\"), type }])) {\n    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n  }\n  if (usedChars.length === 0 && nextChar) {\n    usedChars.push(nextChar);\n    remainingChars.shift();\n  }\n  return [\n    { content: usedChars.join(\"\"), type },\n    { content: remainingChars.join(\"\"), type }\n  ];\n}\nfunction splitLineToFitWidth(line, checkFit) {\n  if (line.some(({ content }) => content.includes(\"\\n\"))) {\n    throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n  }\n  return splitLineToFitWidthRecursion(line, checkFit);\n}\nfunction splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {\n  if (words.length === 0) {\n    if (newLine.length > 0) {\n      lines.push(newLine);\n    }\n    return lines.length > 0 ? lines : [];\n  }\n  let joiner = \"\";\n  if (words[0].content === \" \") {\n    joiner = \" \";\n    words.shift();\n  }\n  const nextWord = words.shift() ?? { content: \" \", type: \"normal\" };\n  const lineWithNextWord = [...newLine];\n  if (joiner !== \"\") {\n    lineWithNextWord.push({ content: joiner, type: \"normal\" });\n  }\n  lineWithNextWord.push(nextWord);\n  if (checkFit(lineWithNextWord)) {\n    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n  }\n  if (newLine.length > 0) {\n    lines.push(newLine);\n    words.unshift(nextWord);\n  } else if (nextWord.content) {\n    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n    lines.push([line]);\n    if (rest.content) {\n      words.unshift(rest);\n    }\n  }\n  return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n  const fo = element.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node.label;\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, line);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction computeDimensionOfText(parentNode, lineHeight, text) {\n  var _a;\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text, type: \"normal\" }]);\n  const textDimension = (_a = testSpan.node()) == null ? void 0 : _a.getBoundingClientRect();\n  if (textDimension) {\n    testElement.remove();\n  }\n  return textDimension;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  for (const line of structuredText) {\n    const checkWidth = (line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width;\n    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);\n    for (const preparedLine of linesUnderWidth) {\n      const tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, preparedLine);\n      lineIndex++;\n    }\n  }\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"emphasis\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width = 200,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text);\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        // cspell: disable-line\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    const vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as a,\n  computeDimensionOfText as c\n};\n"],"names":["emptyOptions","toString","value","options","settings","includeImageAlt","includeHtml","one","node","type","alt","all","children","Array","isArray","values","result","index","length","join","Boolean","splice","list","start","remove","items","end","parameters","chunkStart","from","unshift","slice","push","hasOwnProperty","combineExtensions","extensions","syntaxExtension","extension","hook","maybe","call","undefined","left","right","code","constructs","existing","before","add","unicodePunctuationRegex","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","check","test","String","fromCharCode","factorySpace","effects","ok","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","content","tokenize","initializeContent","contentStart","attempt","this","parser","contentInitial","afterContentStartConstruct","paragraphInitial","previous","lineStart","token","contentType","next","data","document","initializeDocument","containerConstruct","tokenizeContainer","self","stack","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","exitContainers","Object","assign","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","entry","nok","disable","null","includes","blankLine","tokenizeBlankLine","partial","after","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","tokenizeContent","resolve","resolveContent","continuationConstruct","tokenizeContinuation","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","tail","sliceSerialize","initializeFlow","initial","atBlankEnding","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","initializeText","resolveAllLineSuffixes","notText","atBreak","extraResolver","resolveAllText","chunks","tabs","bufferIndex","chunk","charCodeAt","column","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","expectedCode","state","main","addResult","expandTabs","serializeChunks","sliceChunks","accountForPotentialSkip","chunkIndex","go","fields","construct","info","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleMapOfConstructs","map","def","handleConstruct","store","name","create","resolveTo","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","atTab","thematicBreak","tokenizeThematicBreak","marker","sequence","tokenizeListStart","tokenizeListContinuation","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","inside","onBlank","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","afterPrefix","blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","open","contStart","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","headingAtx","tokenizeHeadingAtx","resolveHeadingAtx","sequenceOpen","sequenceFurther","setextUnderline","tokenizeSetextUnderline","resolveToSetextUnderline","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","tokenizeHtmlFlow","resolveToHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","continuationAfter","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","character","textContent","tokenizeCharacterReference","numeric","characterEscape","tokenizeCharacterEscape","lineEnding","tokenizeLineEnding","labelEnd","tokenizeLabelEnd","resolveToLabelEnd","resolveAllLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","close","media","_inactive","_balanced","group","label","insideSpan","labelStart","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","classifyCharacter","attention","tokenizeAttention","resolveAllAttention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","tokenizeHtmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","tokenizeLabelStartLink","hardBreakEscape","tokenizeHardBreakEscape","codeText","tokenizeCodeText","resolveCodeText","tailExitIndex","headEnterIndex","between","resolveText","parse","defaultConstructs","creator","search","preprocess","atCarriageReturn","preprocessor","encoding","match","endPosition","lastIndex","exec","Math","ceil","postprocess","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decodeString","decode","$0","$1","$2","hex","stringifyPosition","position","pos","own","fromMarkdown","compiler","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","and","errorHandler","parent","onExitError","Error","ancestor","lang","title","url","depth","referenceType","fragment","ordered","spread","checked","d","combined","preprocessMarkdown","markdown","withoutMultipleNewlines","withoutExtraSpaces","dedent","markdownToLines","preprocessedMarkdown","lines","currentLine","processNode","parentType","textLines","split","forEach","textLine","word","contentNode","treeNode","markdownToHTML","output","splitTextToChars","Intl","Segmenter","segment","s","splitWordToFitWidth","checkFit","characters","splitWordToFitWidthRecursion","usedChars","remainingChars","nextChar","rest","newWord","splitLineToFitWidth","some","splitLineToFitWidthRecursion","words","newLine","joiner","nextWord","lineWithNextWord","applyStyle","dom","styleFn","attr","addHtmlSpan","width","classes","addBackground","fo","append","div","labelClass","isNode","labelStyle","style","bbox","getBoundingClientRect","height","createTspan","textElement","lineHeight","computeWidthOfText","parentNode","testElement","testSpan","updateTextContentAndStyles","textLength","getComputedTextLength","computeDimensionOfText","_a","textDimension","createFormattedText","g","structuredText","labelGroup","bkg","insert","checkWidth","line2","linesUnderWidth","preparedLine","tspan","getBBox","padding","wrappedLine","innerTspan","createText","el","isTitle","useHtmlLabels","addSvgBackground","log","decodeEntities","vertexNode","svgLabel"],"sourceRoot":""}