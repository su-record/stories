{"version":3,"file":"382.466e6c86.js","mappings":"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","sources":["webpack://stories/./node_modules/mermaid/dist/stateDiagram-v2-d93cdb3a.js"],"sourcesContent":["import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-6aaf32cf.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-b5860b54.js\";\nimport { r as render } from \"./index-3862675e.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-e0da2a9e.js\";\nimport \"./createText-2e5e7dd3.js\";\nimport \"mdast-util-from-markdown\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  diagramObj.db.extract(diagramObj.db.getRootDocV2());\n  return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["SHAPE_STATE","SHAPE_STATE_WITH_DESC","SHAPE_START","SHAPE_END","SHAPE_DIVIDER","SHAPE_GROUP","SHAPE_NOTE","SHAPE_NOTEGROUP","CSS_DIAGRAM","CSS_STATE","CSS_DIAGRAM_STATE","CSS_EDGE","CSS_NOTE","CSS_NOTE_EDGE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_CLUSTER","CSS_DIAGRAM_CLUSTER","CSS_CLUSTER_ALT","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_STATE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELPOS","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","setConf","cnf","keys","Object","key","getClasses","text","diagramObj","db","extract","getRootDocV2","getClassesFromDbInfo","dbInfoItem","classes","join","stateDomId","itemId","counter","type","typeSpacer","typeStr","length","setupNode","g","parent","parsedItem","diagramStates","diagramDb","altFlag","id","classStr","shape","start","DEFAULT_STATE_TYPE","description","common","sanitizeText","getConfig","newNode","Array","isArray","push","sanitizeTextOrArray","doc","log","info","getDir","dir","DIVIDER_TYPE","nodeData","labelStyle","labelText","style","domId","padding","note","noteData","groupData","parentNodeId","setNode","setParent","from","to","position","setEdge","arrowhead","arrowType","arrowheadStyle","labelpos","labelType","thickness","trace","setupDoc","parentParsedItem","forEach","item","stmt","STMT_STATE","STMT_RELATION","state1","state2","edgeData","arrowTypeEnd","label","defaultDir","DEFAULT_NESTED_DOC_DIR","i","parsedItemDoc","value","draw","async","_version","diag","getDirection","securityLevel","state","conf","nodeSpacing","rankSpacing","getStates","graphlib","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","sandboxElement","select","root","nodes","contentDocument","body","svg","element","render","utils","insertTitle","titleTopMargin","getDiagramTitle","bounds","node","getBBox","width","height","attr","svgBounds","configureSvgSize","useMaxWidth","vBox","x","y","debug","labels","document","querySelectorAll","dim","rect","createElementNS","setAttribute","insertBefore","firstChild","renderer","diagram","parser","styles","init","arrowMarkerAbsolute","clear"],"sourceRoot":""}