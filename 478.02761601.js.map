{"version":3,"file":"478.02761601.js","mappings":"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","sources":["webpack://stories/./node_modules/lodash-es/uniqueId.js","webpack://stories/./node_modules/lodash-es/_baseSet.js","webpack://stories/./node_modules/lodash-es/_basePickBy.js","webpack://stories/./node_modules/lodash-es/_basePick.js","webpack://stories/./node_modules/lodash-es/_flatRest.js","webpack://stories/./node_modules/lodash-es/pick.js","webpack://stories/./node_modules/lodash-es/map.js","webpack://stories/./node_modules/lodash-es/flatten.js","webpack://stories/./node_modules/lodash-es/_trimmedEndIndex.js","webpack://stories/./node_modules/lodash-es/_baseTrim.js","webpack://stories/./node_modules/lodash-es/toNumber.js","webpack://stories/./node_modules/lodash-es/toFinite.js","webpack://stories/./node_modules/lodash-es/_baseMap.js","webpack://stories/./node_modules/lodash-es/defaults.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/data/list.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/greedy-fas.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/acyclic.js","webpack://stories/./node_modules/lodash-es/_baseExtremum.js","webpack://stories/./node_modules/lodash-es/_baseGt.js","webpack://stories/./node_modules/lodash-es/max.js","webpack://stories/./node_modules/lodash-es/last.js","webpack://stories/./node_modules/lodash-es/mapValues.js","webpack://stories/./node_modules/lodash-es/_baseLt.js","webpack://stories/./node_modules/lodash-es/min.js","webpack://stories/./node_modules/lodash-es/now.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/util.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/add-border-segments.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/coordinate-system.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/normalize.js","webpack://stories/./node_modules/lodash-es/minBy.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/rank/util.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","webpack://stories/./node_modules/lodash-es/_createFind.js","webpack://stories/./node_modules/lodash-es/toInteger.js","webpack://stories/./node_modules/lodash-es/findIndex.js","webpack://stories/./node_modules/lodash-es/find.js","webpack://stories/./node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","webpack://stories/./node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","webpack://stories/./node_modules/lodash-es/isString.js","webpack://stories/./node_modules/lodash-es/_asciiSize.js","webpack://stories/./node_modules/lodash-es/_hasUnicode.js","webpack://stories/./node_modules/lodash-es/_unicodeSize.js","webpack://stories/./node_modules/lodash-es/_stringSize.js","webpack://stories/./node_modules/lodash-es/size.js","webpack://stories/./node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","webpack://stories/./node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","webpack://stories/./node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","webpack://stories/./node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/rank/index.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/nesting-graph.js","webpack://stories/./node_modules/lodash-es/cloneDeep.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","webpack://stories/./node_modules/lodash-es/_baseZipObject.js","webpack://stories/./node_modules/lodash-es/zipObject.js","webpack://stories/./node_modules/lodash-es/_baseSortBy.js","webpack://stories/./node_modules/lodash-es/_compareAscending.js","webpack://stories/./node_modules/lodash-es/_compareMultiple.js","webpack://stories/./node_modules/lodash-es/_baseOrderBy.js","webpack://stories/./node_modules/lodash-es/sortBy.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/order/cross-count.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/order/init-order.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/order/barycenter.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/order/sort.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/order/index.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","webpack://stories/./node_modules/lodash-es/forOwn.js","webpack://stories/./node_modules/lodash-es/forIn.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/position/bk.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/position/index.js","webpack://stories/./node_modules/dagre-d3-es/src/dagre/layout.js","webpack://stories/./node_modules/lodash-es/_baseRange.js","webpack://stories/./node_modules/lodash-es/_createRange.js","webpack://stories/./node_modules/lodash-es/range.js"],"sourcesContent":["import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","import baseProperty from './_baseProperty.js';\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\nexport default asciiSize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nexport default hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    ++result;\n  }\n  return result;\n}\n\nexport default unicodeSize;\n","import asciiSize from './_asciiSize.js';\nimport hasUnicode from './_hasUnicode.js';\nimport unicodeSize from './_unicodeSize.js';\n\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the string size.\n */\nfunction stringSize(string) {\n  return hasUnicode(string)\n    ? unicodeSize(string)\n    : asciiSize(string);\n}\n\nexport default stringSize;\n","import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport stringSize from './_stringSize.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/**\n * Gets the size of `collection` by returning its length for array-like\n * values or the number of own enumerable string keyed properties for objects.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @returns {number} Returns the collection size.\n * @example\n *\n * _.size([1, 2, 3]);\n * // => 3\n *\n * _.size({ 'a': 1, 'b': 2 });\n * // => 2\n *\n * _.size('pebbles');\n * // => 7\n */\nfunction size(collection) {\n  if (collection == null) {\n    return 0;\n  }\n  if (isArrayLike(collection)) {\n    return isString(collection) ? stringSize(collection) : collection.length;\n  }\n  var tag = getTag(collection);\n  if (tag == mapTag || tag == setTag) {\n    return collection.size;\n  }\n  return baseKeys(collection).length;\n}\n\nexport default size;\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n"],"names":["idCounter","uniqueId","prefix","id","toString","baseSet","object","path","value","customizer","isObject","castPath","index","length","lastIndex","nested","key","toKey","newValue","objValue","undefined","isIndex","assignValue","basePickBy","paths","predicate","result","baseGet","basePick","hasIn","flatRest","func","setToString","overRest","flatten","pick","map","collection","iteratee","isArray","arrayMap","baseMap","baseIteratee","array","baseFlatten","reWhitespace","trimmedEndIndex","string","test","charAt","reTrimStart","baseTrim","slice","replace","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","isSymbol","other","valueOf","isBinary","INFINITY","MAX_INTEGER","toFinite","sign","isArrayLike","Array","baseEach","objectProto","Object","prototype","hasOwnProperty","defaults","baseRest","sources","guard","isIterateeCall","source","props","keysIn","propsIndex","propsLength","eq","call","List","constructor","sentinel","_next","_prev","this","_sentinel","dequeue","entry","unlink","enqueue","strs","curr","push","JSON","stringify","filterOutLinks","join","k","v","DEFAULT_WEIGHT_FN","_","greedyFAS","g","weightFn","nodeCount","state","buildState","results","doGreedyFAS","graph","buckets","zeroIdx","e","outEdges","w","sinks","removeNode","i","concat","collectPredecessors","inEdges","edge","weight","uEntry","node","out","assignBucket","wEntry","fasGraph","Graph","maxIn","maxOut","nodes","setNode","in","edges","prevWeight","edgeWeight","setEdge","Math","max","run","fas","acyclicer","dfsFAS","label","removeEdge","forwardName","name","reversed","stack","visited","dfs","undo","baseExtremum","comparator","current","computed","baseGt","identity","last","mapValues","baseForOwn","baseAssignValue","baseLt","min","now","root","Date","addDummyNode","type","attrs","hasNode","dummy","simplify","simplified","setGraph","simpleLabel","minlen","asNonCompoundGraph","multigraph","isMultigraph","children","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","maxRank","rank","order","normalizeRanks","removeEmptyRanks","offset","layers","delta","nodeRankFactor","vs","addBorderNode","arguments","partition","fn","lhs","rhs","time","start","console","log","notime","addBorderSegments","borderLeft","borderRight","minRank","prop","sg","sgNode","borderType","prev","util","setParent","adjust","rankDir","rankdir","toLowerCase","swapWidthHeight","reverseY","swapXY","swapWidthHeightOne","reverseYOne","points","swapXYOne","dummyChains","normalizeEdge","vRank","wRank","edgeLabel","labelRank","edgeObj","labelpos","origLabel","successors","minBy","longestPath","Number","POSITIVE_INFINITY","slack","feasibleTree","t","directed","size","tightTree","findMinSlackEdge","shiftRanks","nodeEdges","edgeV","createFind","findIndexFunc","fromIndex","iterable","keys","toInteger","remainder","nativeMax","findIndex","baseFindIndex","find","stringTag","isString","isObjectLike","baseGetTag","asciiSize","baseProperty","rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsVarRange","rsZWJ","reHasUnicode","RegExp","hasUnicode","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsOptJoin","rsSeq","rsSymbol","reUnicode","unicodeSize","stringSize","mapTag","setTag","tag","getTag","baseKeys","topsort","visit","CycleException","predecessors","navigation","isDirected","neighbors","bind","acc","doDfs","postorder","preorder","networkSimplex","f","initLowLimValues","initCutValues","leaveEdge","enterEdge","exchangeEdges","alg","assignCutValue","child","childLab","parent","cutvalue","calcCutValue","childIsTail","graphEdge","cutValue","isOutEdge","pointsToHead","otherWeight","isTreeEdge","otherCutValue","tree","dfsAssignLowLim","nextLim","low","lim","hasEdge","vLabel","wLabel","tailLabel","flip","candidates","isDescendant","updateRanks","flipped","u","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","treeDepths","nodeSep","nestingRoot","sumWeights","top","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","depth","cleanup","graphLabel","CLONE_DEEP_FLAG","CLONE_SYMBOLS_FLAG","cloneDeep","baseClone","addSubgraphConstraints","cg","rootPrev","prevChild","buildLayerGraph","relationship","createRootNode","compound","setDefaultNodeLabel","baseZipObject","values","assignFunc","valsLength","zipObject","baseSortBy","comparer","sort","compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","compareMultiple","orders","objCriteria","criteria","othCriteria","ordersLength","baseOrderBy","iteratees","baseUnary","sortBy","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","southEntries","pos","firstIndex","treeSize","forEach","weightSum","initOrder","simpleNodes","orderedVs","barycenter","movable","inV","nodeU","sum","resolveConflicts","entries","mappedEntries","tmp","indegree","entryV","entryW","sourceSet","doResolveConflicts","handleIn","vEntry","merged","mergeEntries","handleOut","pop","reverse","target","biasRight","parts","sortable","unsortable","vsIndex","compareWithBias","consumeUnsortable","bias","sortSubgraph","bl","br","subgraphs","barycenters","subgraphResult","mergeBarycenters","expandSubgraphs","blPred","brPred","downLayerGraphs","buildLayerGraphs","upLayerGraphs","assignOrder","best","bestCC","lastBest","sweepLayerGraphs","ranks","layerGraphs","lg","sorted","layer","parentDummyChains","postorderNums","pathData","findPath","lca","pathIdx","pathV","ascending","vPath","wPath","forOwn","castFunction","forIn","baseFor","findType1Conflicts","conflicts","visitLayer","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","findType2Conflicts","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","conflictsV","hasConflict","verticalAlignment","neighborFn","align","prevIdx","ws","mp","floor","il","ceil","horizontalCompaction","reverseSep","xs","blockG","buildBlockGraph","iterate","setXsFunc","nextNodesFunc","elem","pass1","reduce","pass2","blockGraph","sepFn","sep","nodesep","edgesep","vRoot","uRoot","prevMax","findSmallestWidthAlignment","xss","NEGATIVE_INFINITY","halfWidth","alignCoordinates","alignTo","alignToVals","alignToMin","alignToMax","vert","horiz","alignment","xsVals","balance","ul","ignore","positionX","adjustedLayering","inner","smallestWidth","edgeSep","position","positionY","rankSep","ranksep","prevY","maxHeight","layout","opts","debugTiming","layoutGraph","buildLayoutGraph","runLayout","updateInputGraph","makeSpaceForEdgeLabels","removeSelfEdges","acyclic","nestingGraph","injectEdgeLabelProxies","assignRankMinMax","removeEdgeLabelProxies","normalize","insertSelfEdges","coordinateSystem","positionSelfEdges","removeBorderNodes","fixupEdgeLabelCoords","translateGraph","assignNodeIntersects","reversePointsForReversedEdges","inputGraph","inputLabel","layoutLabel","graphNumAttrs","graphDefaults","graphAttrs","nodeNumAttrs","nodeDefaults","edgeNumAttrs","edgeDefaults","labeloffset","edgeAttrs","canonicalize","selectNumberAttrs","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","p1","p2","nodeV","nodeW","unshift","b","l","r","selfEdges","orderShift","selfEdge","selfNode","obj","newAttrs","nativeCeil","baseRange","end","step","fromRight","createRange","range"],"sourceRoot":""}