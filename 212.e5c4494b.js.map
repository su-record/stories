{"version":3,"file":"212.e5c4494b.js","mappings":"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","sources":["webpack://stories/./node_modules/dagre-d3-es/src/graphlib/json.js","webpack://stories/./node_modules/lodash-es/clone.js","webpack://stories/./node_modules/mermaid/dist/index-3862675e.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, g as getSubGraphTitleMargins, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, h as insertEdge, j as positionEdgeLabel } from \"./edges-e0da2a9e.js\";\nimport { l as log, c as getConfig, m as evaluate } from \"./mermaid-b5860b54.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-2e5e7dd3.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancestorId) => {\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", descendants[ancestorId].includes(id));\n  if (descendants[ancestorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Descendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Descendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of Object.keys(clusterDb)) {\n    const nonClusterChild = clusterDb[id].id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb[parent] && !clusterDb[parent].externalConnections) {\n      clusterDb[id].id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb[parent].externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb[parent].externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(siteConfig.flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  label.attr(\n    \"transform\",\n    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 - node.padding / 3 + (evaluate(siteConfig.flowchart.htmlLabels) ? 5 : 3) + subGraphTitleTopMargin})`\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translating: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  const { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      node.y += subGraphTitleTotalMargin;\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        node.height += subGraphTitleTotalMargin;\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        node.y += subGraphTitleTotalMargin / 2;\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramType, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramType, id) => {\n  insertMarkers(elem, markers, diagramType, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(elem, graph, diagramType, id, void 0, siteConfig);\n};\nexport {\n  render as r\n};\n"],"names":["write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","value","v","nodeValue","node","parent","e","edgeValue","edge","w","name","CLONE_SYMBOLS_FLAG","clone","baseClone","clusterDb","descendants","parents","clear$1","isDescendant","id","ancestorId","log","trace","includes","edgeInCluster","clusterId","info","debug","copy","newGraph","rootId","warn","children","push","forEach","length","data","setNode","setParent","data2","setEdge","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","d1","d2","Object","keys","nonClusterChild","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster","graphlibJson","extractor","hasChildren","graphSettings","dir","rankdir","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","sorter","result","assign","sorted","sortNodesByHierarchy","rect","siteConfig","getConfig","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","flowchart","htmlLabels","text","labelType","createText","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","x","y","subGraphTitleTopMargin","getSubGraphTitleMargins","rectBox","intersect","point","intersectRect","noteGroup","roundedWithTitle","classes","innerRect","append","divider","shapes","clusterElems","insertCluster","elem","clear","recursiveRender","async","_elem","diagramType","parentCluster","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","layout","subGraphTitleTotalMargin","positionNode","points","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers","clear$2","clear$3"],"sourceRoot":""}